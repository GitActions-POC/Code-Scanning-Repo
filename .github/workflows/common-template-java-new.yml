name: common_template_java
on:
  workflow_call:
    inputs:
      GLOBAL_MY_MAPPED_ENV_VAR:
        required: true
        type: string
      junit_files:  
        required: true
        type: string
      package:
        required: true
        type: string
      output:
        required: true
        type: string
      format:  
        required: true
        type: string
      code-quality-check:  
        required: true
        type: string  
    secrets:
      ADOVARIABLE:
        required: true
      CLIENT_ID:
        required: true
      CLIENT_SECRET:
        required: true
      SUBSCRIPTION_ID:
        required: true
      TENANT_ID:
        required: true  
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: checkout
      uses: actions/checkout@v3.5.0
    - run: |-
        echo "Using an input-macro works for secrets var : ${{ secrets.ADOVARIABLE }}"
        echo "Using the env var directly does not work : ${{ inputs.GLOBAL_MY_MAPPED_ENV_VAR }}"
      shell: bash
    - name: Setup Java 8
      uses: actions/setup-java@v3.12.0
      with:
        distribution: zulu
        java-version: '8'
    - name: Run maven
      run: mvn --file ${{ inputs.package }} package
      env:
        MAVEN_OPTS: "-Xmx3072m"  
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2.9.0
      if: always()
      with:
        junit_files: ${{ inputs.junit_files }}  
    - uses: actions/github-script@v6.4.0
      env:
        TARGET_FOLDER: "${{ runner.temp }}"
        CONTENTS: "**"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |-
          const fs = require('fs').promises
          const path = require('path')
          const target = path.resolve(process.env.TARGET_FOLDER)
          process.chdir(process.env.SOURCE_FOLDER || '.')
          if (process.env.CLEAN_TARGET_FOLDER === 'true') await io.rmRF(target)
          const flattenFolders = process.env.FLATTEN_FOLDERS === 'true'
          const options = {force: process.env.OVERWRITE === 'true'}
          const globber = await glob.create(process.env.CONTENTS || '**')
          for await (const file of globber.globGenerator()) {
            if ((await fs.lstat(file)).isDirectory()) continue
            const filename = flattenFolders ? path.basename(file) : file.substring(process.cwd().length)
            const dest = path.join(target, filename)
            await io.mkdirP(path.dirname(dest))
            await io.cp(file, dest, options)
          }
    -  name: code analysis   
       if: ${{ inputs.code-quality-check  == 'yes' }}
       uses: codacy/codacy-analysis-cli-action@master
       with:
        output: ${{ inputs.output }}
        format: ${{ inputs.format }}
          # Adjust severity of non-security issues
        gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will hand over control about PR rejection to the GitHub side
        max-allowed-issues: 2147483647
      
      # Upload the SARIF file generated in the previous step
    -  name: Upload SARIF results file
       if: ${{ inputs.code-quality-check  == 'yes' }}
       uses: github/codeql-action/upload-sarif@main
       with:
        sarif_file: ${{ inputs.output }} 
        
    - uses: actions/upload-artifact@v3.1.1
      with:
        name: drop-${{ github.sha }}
        path: "${{ runner.temp }}"
  deploy:
    needs: build
    runs-on: windows-latest
    steps:
    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: drop-${{ github.sha }}
    - name: 'Azure App Service Deploy: poc-adotogithub-java'
      uses: azure/login@v1.4.6
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
    - name: 'Azure App Service Deploy: poc-adotogithub-java'
      uses: azure/webapps-deploy@v2.2.10
      with:
        app-name: poc-adotogithub-java
        package: "${{ github.workspace }}/target/musicalbum-0.0.1-SNAPSHOT.jar"        
